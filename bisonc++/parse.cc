// Generated by Bisonc++ V6.04.01 on Mon, 28 Mar 2022 15:58:14 +0530

// base/comment

// $insert class.ih
#include "GdbMiParser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {302, 6}, // 1: output (OPEN_PAREN) ->  out_of_band_record_list optional_result_record OPEN_PAREN variable CLOSED_PAREN NEWLINE
     {303, 0}, // 2: optional_result_record ->  <empty>
     {303, 1}, // 3: optional_result_record ->  result_record
     {304, 5}, // 4: result_record (CARROT) ->  optional_token CARROT result_class result_list NEWLINE
     {305, 0}, // 5: out_of_band_record_list ->  <empty>
     {305, 2}, // 6: out_of_band_record_list ->  out_of_band_record_list out_of_band_record
     {306, 1}, // 7: out_of_band_record ->  async_record
     {306, 1}, // 8: out_of_band_record ->  stream_record
     {307, 1}, // 9: async_record ->  exec_async_output
     {307, 1}, // 10: async_record ->  status_async_output
     {307, 1}, // 11: async_record ->  notify_async_output
     {308, 5}, // 12: exec_async_output (MULT_OP) ->  optional_token MULT_OP async_class result_list NEWLINE
     {309, 5}, // 13: status_async_output (ADD_OP) ->  optional_token ADD_OP async_class result_list NEWLINE
     {310, 5}, // 14: notify_async_output (EQUAL_SIGN) ->  optional_token EQUAL_SIGN async_class result_list NEWLINE
     {311, 0}, // 15: result_list ->  <empty>
     {311, 3}, // 16: result_list (COMMA) ->  result_list COMMA result
     {312, 1}, // 17: result_class (STRING_LITERAL) ->  STRING_LITERAL
     {313, 1}, // 18: async_class (STRING_LITERAL) ->  STRING_LITERAL
     {314, 3}, // 19: result (EQUAL_SIGN) ->  variable EQUAL_SIGN value
     {315, 1}, // 20: variable (STRING_LITERAL) ->  STRING_LITERAL
     {316, 1}, // 21: value ->  const
     {316, 1}, // 22: value ->  tuple
     {316, 1}, // 23: value ->  list
     {317, 1}, // 24: const ->  cstring
     {318, 1}, // 25: value_list ->  value
     {318, 3}, // 26: value_list (COMMA) ->  value_list COMMA value
     {319, 1}, // 27: value_result_list ->  result
     {319, 3}, // 28: value_result_list (COMMA) ->  value_result_list COMMA result
     {320, 2}, // 29: tuple (OPEN_BRACE) ->  OPEN_BRACE CLOSED_BRACE
     {320, 3}, // 30: tuple (OPEN_BRACE) ->  OPEN_BRACE value_result_list CLOSED_BRACE
     {321, 2}, // 31: list (OPEN_BRACKET) ->  OPEN_BRACKET CLOSED_BRACKET
     {321, 3}, // 32: list (OPEN_BRACKET) ->  OPEN_BRACKET value_list CLOSED_BRACKET
     {321, 3}, // 33: list (OPEN_BRACKET) ->  OPEN_BRACKET value_result_list CLOSED_BRACKET
     {322, 1}, // 34: stream_record ->  console_stream_output
     {322, 1}, // 35: stream_record ->  target_stream_output
     {322, 1}, // 36: stream_record ->  log_stream_output
     {323, 3}, // 37: console_stream_output (TILDA) ->  TILDA cstring NEWLINE
     {324, 3}, // 38: target_stream_output (AT_SYMBOL) ->  AT_SYMBOL cstring NEWLINE
     {325, 3}, // 39: log_stream_output (AMPERSAND) ->  AMPERSAND cstring NEWLINE
     {326, 1}, // 40: cstring (CSTRING) ->  CSTRING
     {327, 0}, // 41: optional_token ->  <empty>
     {327, 1}, // 42: optional_token ->  token
     {328, 1}, // 43: token (INTEGER_LITERAL) ->  INTEGER_LITERAL
     {329, 1}, // 44: output_$ ->  output
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { DEF_RED}, {  3} },                           
    { {     302}, {  1} }, // output                 
    { {     305}, {  2} }, // out_of_band_record_list
    { {       0}, { -5} },                           
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {       2} }, 
    { {      EOF_}, { ACCEPT_} }, 
    { {         0}, {       0} }, 
};

SR_ s_2[] =
{
    { { REQ_DEF}, {  19} },                          
    { {     303}, {   3} }, // optional_result_record
    { {     306}, {   4} }, // out_of_band_record    
    { {     304}, {   5} }, // result_record         
    { {     307}, {   6} }, // async_record          
    { {     322}, {   7} }, // stream_record         
    { {     327}, {   8} }, // optional_token        
    { {     308}, {   9} }, // exec_async_output     
    { {     309}, {  10} }, // status_async_output   
    { {     310}, {  11} }, // notify_async_output   
    { {     323}, {  12} }, // console_stream_output 
    { {     324}, {  13} }, // target_stream_output  
    { {     325}, {  14} }, // log_stream_output     
    { {     328}, {  15} }, // token                 
    { {     265}, {  16} }, // TILDA                 
    { {     266}, {  17} }, // AT_SYMBOL             
    { {     267}, {  18} }, // AMPERSAND             
    { {     257}, {  19} }, // INTEGER_LITERAL       
    { {     260}, {  -2} }, // OPEN_PAREN            
    { {       0}, { -41} },                          
};

SR_ s_3[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       260}, { 20} }, // OPEN_PAREN
    { {         0}, {  0} },              
};

SR_ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR_ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR_ s_8[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       274}, { 21} }, // CARROT    
    { {       263}, { 22} }, // MULT_OP   
    { {       262}, { 23} }, // ADD_OP    
    { {       264}, { 24} }, // EQUAL_SIGN
    { {         0}, {  0} },              
};

SR_ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR_ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR_ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR_ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR_ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_16[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       326}, { 25} }, // cstring
    { {       272}, { 26} }, // CSTRING
    { {         0}, {  0} },           
};

SR_ s_17[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       326}, { 27} }, // cstring
    { {       272}, { 26} }, // CSTRING
    { {         0}, {  0} },           
};

SR_ s_18[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       326}, { 28} }, // cstring
    { {       272}, { 26} }, // CSTRING
    { {         0}, {  0} },           
};

SR_ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       315}, { 29} }, // variable      
    { {       271}, { 30} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_21[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       312}, { 31} }, // result_class  
    { {       271}, { 32} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_22[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       313}, { 33} }, // async_class   
    { {       271}, { 34} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_23[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       313}, { 35} }, // async_class   
    { {       271}, { 34} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_24[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       313}, { 36} }, // async_class   
    { {       271}, { 34} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_25[] =
{
    { { REQ_TOKEN}, {  2} },           
    { {       270}, { 37} }, // NEWLINE
    { {         0}, {  0} },           
};

SR_ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_27[] =
{
    { { REQ_TOKEN}, {  2} },           
    { {       270}, { 38} }, // NEWLINE
    { {         0}, {  0} },           
};

SR_ s_28[] =
{
    { { REQ_TOKEN}, {  2} },           
    { {       270}, { 39} }, // NEWLINE
    { {         0}, {  0} },           
};

SR_ s_29[] =
{
    { { REQ_TOKEN}, {  2} },                
    { {       261}, { 40} }, // CLOSED_PAREN
    { {         0}, {  0} },                
};

SR_ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR_ s_31[] =
{
    { { DEF_RED}, {   2} },               
    { {     311}, {  41} }, // result_list
    { {       0}, { -15} },               
};

SR_ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_33[] =
{
    { { DEF_RED}, {   2} },               
    { {     311}, {  42} }, // result_list
    { {       0}, { -15} },               
};

SR_ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_35[] =
{
    { { DEF_RED}, {   2} },               
    { {     311}, {  43} }, // result_list
    { {       0}, { -15} },               
};

SR_ s_36[] =
{
    { { DEF_RED}, {   2} },               
    { {     311}, {  44} }, // result_list
    { {       0}, { -15} },               
};

SR_ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_40[] =
{
    { { REQ_TOKEN}, {  2} },           
    { {       270}, { 45} }, // NEWLINE
    { {         0}, {  0} },           
};

SR_ s_41[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       270}, { 46} }, // NEWLINE
    { {       273}, { 47} }, // COMMA  
    { {         0}, {  0} },           
};

SR_ s_42[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       270}, { 48} }, // NEWLINE
    { {       273}, { 47} }, // COMMA  
    { {         0}, {  0} },           
};

SR_ s_43[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       270}, { 49} }, // NEWLINE
    { {       273}, { 47} }, // COMMA  
    { {         0}, {  0} },           
};

SR_ s_44[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       270}, { 50} }, // NEWLINE
    { {       273}, { 47} }, // COMMA  
    { {         0}, {  0} },           
};

SR_ s_45[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR_ s_46[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR_ s_47[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       314}, { 51} }, // result        
    { {       315}, { 52} }, // variable      
    { {       271}, { 30} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_52[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       264}, { 53} }, // EQUAL_SIGN
    { {         0}, {  0} },              
};

SR_ s_53[] =
{
    { { REQ_TOKEN}, {  9} },                
    { {       316}, { 54} }, // value       
    { {       317}, { 55} }, // const       
    { {       320}, { 56} }, // tuple       
    { {       321}, { 57} }, // list        
    { {       326}, { 58} }, // cstring     
    { {       258}, { 59} }, // OPEN_BRACE  
    { {       268}, { 60} }, // OPEN_BRACKET
    { {       272}, { 26} }, // CSTRING     
    { {         0}, {  0} },                
};

SR_ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR_ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR_ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_59[] =
{
    { { REQ_TOKEN}, {  6} },                     
    { {       259}, { 61} }, // CLOSED_BRACE     
    { {       319}, { 62} }, // value_result_list
    { {       314}, { 63} }, // result           
    { {       315}, { 52} }, // variable         
    { {       271}, { 30} }, // STRING_LITERAL   
    { {         0}, {  0} },                     
};

SR_ s_60[] =
{
    { { REQ_TOKEN}, { 15} },                     
    { {       269}, { 64} }, // CLOSED_BRACKET   
    { {       318}, { 65} }, // value_list       
    { {       319}, { 66} }, // value_result_list
    { {       316}, { 67} }, // value            
    { {       314}, { 63} }, // result           
    { {       317}, { 55} }, // const            
    { {       320}, { 56} }, // tuple            
    { {       321}, { 57} }, // list             
    { {       315}, { 52} }, // variable         
    { {       326}, { 58} }, // cstring          
    { {       258}, { 59} }, // OPEN_BRACE       
    { {       268}, { 60} }, // OPEN_BRACKET     
    { {       271}, { 30} }, // STRING_LITERAL   
    { {       272}, { 26} }, // CSTRING          
    { {         0}, {  0} },                     
};

SR_ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_62[] =
{
    { { REQ_TOKEN}, {  3} },                
    { {       259}, { 68} }, // CLOSED_BRACE
    { {       273}, { 69} }, // COMMA       
    { {         0}, {  0} },                
};

SR_ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR_ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_65[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       269}, { 70} }, // CLOSED_BRACKET
    { {       273}, { 71} }, // COMMA         
    { {         0}, {  0} },                  
};

SR_ s_66[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       269}, { 72} }, // CLOSED_BRACKET
    { {       273}, { 69} }, // COMMA         
    { {         0}, {  0} },                  
};

SR_ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_69[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       314}, { 73} }, // result        
    { {       315}, { 52} }, // variable      
    { {       271}, { 30} }, // STRING_LITERAL
    { {         0}, {  0} },                  
};

SR_ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR_ s_71[] =
{
    { { REQ_TOKEN}, {  9} },                
    { {       316}, { 74} }, // value       
    { {       317}, { 55} }, // const       
    { {       320}, { 56} }, // tuple       
    { {       321}, { 57} }, // list        
    { {       326}, { 58} }, // cstring     
    { {       258}, { 59} }, // OPEN_BRACE  
    { {       268}, { 60} }, // OPEN_BRACKET
    { {       272}, { 26} }, // CSTRING     
    { {         0}, {  0} },                
};

SR_ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR_ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR_ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,
};

} // anonymous namespace ends



// $insert polymorphicCode
namespace Meta_
{

size_t const *t_nErrors;
// $insert idoftag
char const *idOfTag_[] = {
    "OUTPUT",
    "RESULT_LIST",
    "RESULT",
    "OOB_RECORD_LIST",
    "RESULT_RECORD",
    "OOB_RECORD",
    "STRING",
    "INT",
    "<undefined>"
};

size_t const *s_nErrors_;

Base::~Base()
{}

}   // namespace Meta_

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
GdbMiParserBase::GdbMiParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
    Meta_::t_nErrors = &d_nErrors_;
}

// base/clearin
void GdbMiParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void GdbMiParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void GdbMiParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void GdbMiParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int GdbMiParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void GdbMiParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void GdbMiParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void GdbMiParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void GdbMiParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void GdbMiParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void GdbMiParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void GdbMiParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void GdbMiParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t GdbMiParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void GdbMiParser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void GdbMiParser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
        { d_val_ = setOutput(vs_(-5).get<Tag_::OOB_RECORD_LIST>(), vs_(-4).get<Tag_::RESULT_RECORD>()); }
        break;

        case 2:
        { d_val_ = (GdbMiResultRecord*)nullptr; }
        break;

        case 3:
        { d_val_ = vs_(0).get<Tag_::RESULT_RECORD>(); }
        break;

        case 4:
        { d_val_ = createResultRecord(vs_(-2).get<Tag_::STRING>(), vs_(-4).get<Tag_::STRING>(), vs_(-1).get<Tag_::RESULT_LIST>()); }
        break;

        case 5:
        { d_val_ = std::vector<GdbMiOutOfBandRecord *>{};}
        break;

        case 6:
        { vs_(-1).get<Tag_::OOB_RECORD_LIST>().push_back(vs_(0).get<Tag_::OOB_RECORD>()); d_val_ = std::move(vs_(-1).get<Tag_::OOB_RECORD_LIST>()); }
        break;

        case 7:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 8:
        { d_val_ = vs_(0).get<Tag_::OOB_RECORD>();}
        break;

        case 9:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 10:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 11:
        { d_val_ = vs_(0).get<Tag_::OOB_RECORD>();}
        break;

        case 12:
        { d_val_ = createExecAsyncOutput(vs_(-4).get<Tag_::STRING>(), vs_(-2).get<Tag_::STRING>(), vs_(-1).get<Tag_::RESULT_LIST>());}
        break;

        case 13:
        { d_val_ = createStatusAsyncOutput(vs_(-4).get<Tag_::STRING>(), vs_(-2).get<Tag_::STRING>(), vs_(-1).get<Tag_::RESULT_LIST>());}
        break;

        case 14:
        { d_val_ = createNotifyAsyncOutput(vs_(-4).get<Tag_::STRING>(), vs_(-2).get<Tag_::STRING>(), vs_(-1).get<Tag_::RESULT_LIST>());}
        break;

        case 15:
        { d_val_ = std::vector<GdbMiResult *>{}; }
        break;

        case 16:
        { vs_(-2).get<Tag_::RESULT_LIST>().push_back(vs_(0).get<Tag_::RESULT>()); d_val_ = std::move(vs_(-2).get<Tag_::RESULT_LIST>()); }
        break;

        case 17:
        { d_val_ = d_scanner->matched();}
        break;

        case 18:
        { d_val_ = d_scanner->matched();}
        break;

        case 19:
        { d_val_ = vs_(0).get<Tag_::RESULT>(); d_val_.get<Tag_::RESULT>()->_variable = vs_(-2).get<Tag_::STRING>(); }
        break;

        case 20:
        { d_val_ = std::string{d_scanner->matched()};}
        break;

        case 21:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 22:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 23:
        { d_val_ = vs_(0).get<Tag_::RESULT>();}
        break;

        case 24:
        { d_val_ = createConst(vs_(0).get<Tag_::STRING>());}
        break;

        case 25:
        { d_val_ = std::vector<GdbMiResult *>{}; d_val_.get<Tag_::RESULT_LIST>().push_back(vs_(0).get<Tag_::RESULT>());}
        break;

        case 26:
        { vs_(-2).get<Tag_::RESULT_LIST>().push_back(vs_(0).get<Tag_::RESULT>()); d_val_ = vs_(-2).get<Tag_::RESULT_LIST>();}
        break;

        case 27:
        { d_val_ = std::vector<GdbMiResult *>{}; d_val_.get<Tag_::RESULT_LIST>().push_back(vs_(0).get<Tag_::RESULT>());}
        break;

        case 28:
        { vs_(-2).get<Tag_::RESULT_LIST>().push_back(vs_(0).get<Tag_::RESULT>()); d_val_ = vs_(-2).get<Tag_::RESULT_LIST>();}
        break;

        case 29:
        { d_val_ = createTuple(); }
        break;

        case 30:
        { d_val_ = createTuple(vs_(-1).get<Tag_::RESULT_LIST>()); }
        break;

        case 31:
        { d_val_ = createList();}
        break;

        case 32:
        { d_val_ = createList(vs_(-1).get<Tag_::RESULT_LIST>());}
        break;

        case 33:
        { d_val_ = createList(vs_(-1).get<Tag_::RESULT_LIST>());}
        break;

        case 34:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 35:
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 36:
        { d_val_ = vs_(0).get<Tag_::OOB_RECORD>();}
        break;

        case 37:
        { d_val_ = createConsoleStreamOutput(vs_(-1).get<Tag_::STRING>());}
        break;

        case 38:
        { d_val_ = createTargetStreamOutput(vs_(-1).get<Tag_::STRING>());}
        break;

        case 39:
        { d_val_ = createLogStreamOutput(vs_(-1).get<Tag_::STRING>());}
        break;

        case 40:
        { d_val_ = d_scanner->matched(); }
        break;

        case 41:
        { d_val_ = std::string{}; }
        break;

        case 42:
        { d_val_ = vs_(0).get<Tag_::STRING>(); }
        break;

        case 43:
        { d_val_ = d_scanner->matched(); }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void GdbMiParser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void GdbMiParser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void GdbMiParser::print_()
{
// $insert print
}

// derived/parse
int GdbMiParser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


